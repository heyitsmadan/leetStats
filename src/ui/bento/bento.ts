// src/ui/bento/bento.ts
import type { ProcessedData, LegacyStats } from '../../types';
import { getLegacyStats } from '../../analysis/stats/getLegacyStats';
import html2canvas from 'html2canvas';

// Store the processed data and the latest generated image blob
let legacyStats: LegacyStats | null = null;
let currentPreviewBlob: Blob | null = null;
let isRendering = false;
let usernameCache = '';

/**
 * Main function to generate the bento card as a canvas and display it in the preview area.
 * This is the new core logic that treats the preview as an image.
 */
async function renderBentoPreview() {
    if (isRendering || !legacyStats) return;
    isRendering = true;

    const loader = document.getElementById('bento-preview-loader');
    const previewCanvas = document.getElementById('bento-preview-canvas') as HTMLCanvasElement;
    const shareBtn = document.getElementById('share-bento-btn');

    // Show loader and disable share button during rendering
    if (loader) loader.style.display = 'block';
    if (previewCanvas) previewCanvas.style.display = 'none';
    if (shareBtn) shareBtn.setAttribute('disabled', 'true');
    currentPreviewBlob = null;

    try {
        // 1. CREATE HTML OFF-SCREEN
        const offscreenContainer = document.createElement('div');
        offscreenContainer.style.position = 'absolute';
        offscreenContainer.style.left = '-9999px';
        offscreenContainer.style.top = '0px';

        const selectedRecordNames = Array.from(document.querySelectorAll('.bento-item-checkbox:checked'))
            .map(cb => (cb as HTMLElement).dataset.recordName);
        const selectedRecords = legacyStats.records.filter(r => selectedRecordNames.includes(r.name));

        // Use the same render-safe structure and styles from layout.ts
        let bentoHTML = `
            <div id="bento-render-node" class="render-safe" style="width: 450px; height: 800px; background: radial-gradient(circle, #1a1a1a 0%, #111 100%); display: flex; flex-direction: column;">
                <div id="bento-header">${usernameCache}</div>
                <div id="bento-grid-wrapper" style="flex-grow: 1; min-height: 0;">
                    <div id="bento-grid"></div>
                </div>
                <div id="bento-footer">generated by leetStats</div>
            </div>`;
        offscreenContainer.innerHTML = bentoHTML;

        const grid = offscreenContainer.querySelector('#bento-grid');
        if (grid && selectedRecords.length > 0) {
            const recordsCard = document.createElement('div');
            recordsCard.className = 'bento-card';
            recordsCard.style.gridColumn = 'span 6';
            recordsCard.style.gridRow = 'span 6';
            
            let recordsHTML = `<h3 class="bento-card-title">Records</h3><div class="bento-card-content">`;
            selectedRecords.forEach(record => {
                recordsHTML += `
                    <div class="record-item">
                        <span class="record-label">${record.name}</span>
                        <div class="record-value">
                            <span>${record.mainStat || record.value}</span>
                            <span class="record-context">${record.dateStat || ''}</span>
                        </div>
                    </div>`;
            });
            recordsHTML += `</div>`;
            recordsCard.innerHTML = recordsHTML;
            grid.appendChild(recordsCard);
        }

        document.body.appendChild(offscreenContainer);
        const renderNode = document.getElementById('bento-render-node') as HTMLElement;

        // 2. CONVERT HIDDEN HTML TO CANVAS
        const generatedCanvas = await html2canvas(renderNode, {
            backgroundColor: null, // Use the element's background
            useCORS: true,
            scale: 2, // For a high-resolution 900x1600 image
        });

        // 3. DISPLAY CANVAS IN PREVIEW
        const ctx = previewCanvas.getContext('2d');
        if (ctx) {
            previewCanvas.width = generatedCanvas.width;
            previewCanvas.height = generatedCanvas.height;
            // Set a responsive width, height will adjust automatically
            previewCanvas.style.width = '100%';
            previewCanvas.style.height = 'auto';
            ctx.drawImage(generatedCanvas, 0, 0);
        }

        // 4. STORE BLOB FOR SHARING
        generatedCanvas.toBlob((blob) => {
            currentPreviewBlob = blob;
            if (shareBtn) shareBtn.removeAttribute('disabled'); // Re-enable share
        }, 'image/png');

        // Show the final canvas image and hide the loader
        if (loader) loader.style.display = 'none';
        if (previewCanvas) previewCanvas.style.display = 'block';
        document.body.removeChild(offscreenContainer);

    } catch (error) {
        console.error("Failed to render bento preview:", error);
        if (loader) loader.style.display = 'none';
    } finally {
        isRendering = false;
    }
}

export function initializeBentoGenerator(processedData: ProcessedData, username: string) {
    if (!legacyStats) {
        legacyStats = getLegacyStats(processedData);
    }
    usernameCache = username;

    const generateCardBtn = document.getElementById('generate-card-btn');
    const modal = document.getElementById('bento-modal');
    const closeModalBtn = document.getElementById('bento-modal-close-btn');
    const shareBtn = document.getElementById('share-bento-btn');

    if (!generateCardBtn || !modal || !closeModalBtn || !shareBtn) {
        return;
    }

    generateCardBtn.addEventListener('click', () => {
        modal.style.display = 'flex';
        if (!document.getElementById('bento-records-accordion-content')?.hasChildNodes()) {
            populateAccordion();
        }
        renderBentoPreview(); // Initial render
    });

    closeModalBtn.addEventListener('click', () => modal.style.display = 'none');
    modal.addEventListener('click', (e) => {
        if (e.target === modal) modal.style.display = 'none';
    });

    // Share button now uses the pre-rendered blob
    shareBtn.addEventListener('click', async () => {
        if (!currentPreviewBlob) {
            console.error("No preview image available to share.");
            return;
        }
        const file = new File([currentPreviewBlob], 'leetstats_card.png', { type: 'image/png' });
        if (navigator.share && navigator.canShare({ files: [file] })) {
            await navigator.share({
                title: 'My LeetCode Stats',
                text: 'Check out my LeetCode stats card! Generated by LeetStats.',
                files: [file],
            }).catch(error => console.error('Sharing failed:', error));
        } else {
            const link = document.createElement('a');
            link.download = `${username}-leetstats.png`;
            link.href = URL.createObjectURL(currentPreviewBlob);
            link.click();
            URL.revokeObjectURL(link.href);
        }
    });

    // Accordion and resize listeners
    document.querySelectorAll('.bento-accordion-header').forEach(header => {
        header.addEventListener('click', () => {
            const content = header.nextElementSibling as HTMLElement;
            const icon = header.querySelector('svg');
            if (content && icon) {
                const isVisible = content.style.display === 'block';
                content.style.display = isVisible ? 'none' : 'block';
                icon.style.transform = isVisible ? 'rotate(0deg)' : 'rotate(180deg)';
            }
        });
    });
}

function populateAccordion() {
    const recordsContent = document.getElementById('bento-records-accordion-content');
    if (!recordsContent || !legacyStats?.records) return;
    recordsContent.innerHTML = ''; // Clear previous
    legacyStats.records.forEach(record => {
        const checkboxId = `bento-checkbox-${record.name.replace(/\s+/g, '-')}`;
        const label = document.createElement('label');
        label.className = 'flex items-center space-x-3 p-2 rounded-md hover:bg-white/10 cursor-pointer';
        label.innerHTML = `
            <input type="checkbox" id="${checkboxId}" data-record-name="${record.name}" class="bento-item-checkbox form-checkbox h-4 w-4 rounded bg-transparent border-gray-500 text-blue-500 focus:ring-blue-500">
            <span class="text-sm text-gray-300">${record.name}</span>
        `;
        recordsContent.appendChild(label);
        // Add listener to re-render the canvas on change
        label.querySelector('input')?.addEventListener('change', renderBentoPreview);
    });
}

// The old updateBentoGridPreview and setPreviewAspectRatio functions are no longer needed